#python --中心扩展法
class Solution:
    def longestPalindrome(self, s: str) -> str:
        sLen = len(s)
        if sLen==0 or sLen==1:
            return s
        start = 0
        end = 0
        mlen = 0
        for i in range(sLen):
            len1 = self.expendaroundcenter(s,i,i)
            len2 = self.expendaroundcenter(s,i,i+1)
            mlen = max(max(len1,len2),mlen)
            if mlen>(end-start)+1:
                start = i - int((mlen - 1) / 2)
                end = i + int(mlen / 2)
        return s[start:(start+mlen)]
    #计算以left和right为中心的回文串长度    
    def expendaroundcenter(self,s: str,left: int,right: int) -> int:
        L = left
        R = right
        while L>=0 and R<len(s) and s[R]==s[L]:
            L -= 1
            R += 1
        return R - L - 1


//c++ --中心扩展法，参考题解
class Solution {
public:
    string longestPalindrome(string s) {
        int len=s.size();
        if(len==0||len==1)
            return s;
        int start=0;//记录回文子串起始位置
        int end=0;//记录回文子串终止位置
        int mlen=0;//记录最大回文子串的长度
        for(int i=0;i<len;i++)
        {
            int len1=expendaroundcenter(s,i,i);//一个元素为中心
            int len2=expendaroundcenter(s,i,i+1);//两个元素为中心
            mlen=max(max(len1,len2),mlen);
            if(mlen>end-start+1)
            {
                start=i-(mlen-1)/2;
                end=i+mlen/2;
            }
        }
        return s.substr(start,mlen);
        //该函数的意思是获取从start开始长度为mlen长度的字符串
    }
private:
    int expendaroundcenter(string &s,int left,int right)
    //计算以left和right为中心的回文串长度
    {
        int L=left;
        int R=right;
        while(L>=0 && R<s.length() && s[R]==s[L])
        {
            L--;
            R++;
        }
        return R-L-1;
    }
};
